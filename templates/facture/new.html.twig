{% extends 'base.html.twig' %}

{% block title %}Facture | {% endblock %}
{% block body %}

    <div class="col-12">
        {{ form_start(form) }}
        <div class="card card-fluid">
            <div class="card-header bg-soft-custom">
              <h6> <i class="fa-solid fa-list" style="font-size:20px;"></i> Créer une facture </h6>
            </div>
            <div class="card-body">
                {{ include('facture/_form.html.twig') }}
            </div>

            <div class="card-footer">
                 <div class="card-footer-content">
                    <button type="submit" class="btn btn-primary float-right ml-2">Enregistrer</button>
{#                    <a href="" class="btn btn-info float-right"><i class="oi oi-home"></i> Retour</a>#}
                </div>
            </div>
        </div>
        {{ form_end(form) }}
    </div>

{% endblock %}



{% block javascripts %}
    <script>
        // Fonction pour mettre à jour la remise du client en fonctionne du id
        function updateRemise(clientId) {
            if (clientId) {
                fetch('/facture/pro/format/clients/' + clientId + '/remise')
                    .then(response => response.json())
                    .then(data => {
                        // Mettre à jour la valeur du champ de remise dans chaque ligne de la collection de détails de facture
                        document.querySelectorAll('.remise').forEach(function(element) {
                            element.value = data.remise;
                            // Recalculer les montants après la mise à jour de la remise
                            var QdetailId = element.getAttribute('data-id');
                            calculerMontants(detailId);
                        });
                    })
                    .catch(error => console.error('Erreur:', error));
            }
        }


        document.addEventListener('DOMContentLoaded', function() {
            // Ajouter un écouteur d'événement sur le champ du client pour mettre à jour la remise
            document.querySelector('select[name="facture[IdClient]"]').addEventListener('change', function() {
                updateRemise(this.value);
            });

            // initialisation de l evenement
            function attacherEvenementChangeProduit() {
                document.querySelectorAll('.produit-selector').forEach(function(element) {
                    element.addEventListener('change', function(event) {
                        var produitId = event.target.value;
                        var detailId = event.target.getAttribute('data-id');
                        if (produitId) {
                            fetch('/produit/' + produitId + '/prix')
                                .then(response => response.json())
                                .then(data => {
                                    var champPrix = document.querySelector('.prix[data-id="' + detailId + '"]');
                                    if (champPrix) {
                                        champPrix.value = data.prix;
                                        calculerMontants(detailId);
                                    }
                                })
                                .catch(error => console.error('Erreur:', error));
                        }
                    });

                    var event = new Event('change');
                    element.dispatchEvent(event);
                });
            }

            // Fonction pour calculer les montants d'une ligne de facture
            function calculerMontants(detailId) {
                const quantite = parseFloat(document.querySelector(`.quantite[data-id="${detailId}"]`).value) || 0;
                const prix = parseFloat(document.querySelector(`.prix[data-id="${detailId}"]`).value) || 0;
                const remise = parseFloat(document.querySelector(`.remise[data-id="${detailId}"]`).value) || 0;

                const montantBrut = prix * quantite;
                const montantHT = montantBrut - (montantBrut * remise / 100);
                const tauxTva = 0.18; // Taux de TVA à 18%
                const montantTVA = montantHT * tauxTva;
                const montantTTC = montantHT + montantTVA;

                document.querySelector(`.montantBrut[data-id="${detailId}"]`).value = montantBrut.toFixed(0);
                document.querySelector(`.montantHT[data-id="${detailId}"]`).value = montantHT.toFixed(0);
                // document.querySelector(`.montantTVA[data-id="${detailId}"]`).value = montantTVA.toFixed(0);
                document.querySelector(`.montantTVA[data-id="${detailId}"]`).value = 0;
               // document.querySelector(`.montantTTC[data-id="${detailId}"]`).value = montantTTC.toFixed(0);
                document.querySelector(`.montantTTC[data-id="${detailId}"]`).value = montantHT.toFixed(0);
            }

            // Fonction pour attacher les événements de changement de quantité, prix, remise
            function attacherEvenementChangeMontants() {
                document.querySelectorAll('.quantite, .prix, .remise').forEach(function(element) {
                    element.addEventListener('input', function(event) {
                        const detailId = event.target.getAttribute('data-id');
                        calculerMontants(detailId);
                        calculateTotalTTC();
                    });
                });
            }

            // Initialisation des événements
            attacherEvenementChangeProduit();
            attacherEvenementChangeMontants();

            // Fonction pour calculer le total TTC global
            function calculateTotalTTC() {
                let totalTTC = 0;
                document.querySelectorAll('.montantTTC').forEach(function(element) {
                    totalTTC += parseFloat(element.value) || 0;
                });
                const totalElement = document.getElementById('total-ttc');
                if (totalElement) {
                    totalElement.textContent = totalTTC.toFixed(2);
                }
            }

            // Ajout d'un écouteur d'événement pour le bouton d'ajout de nouvelle ligne
            document.getElementById('add-collection-detail-facture').addEventListener('click', function() {
                attacherEvenementChangeProduit();
                attacherEvenementChangeMontants();
            });
        });

    </script>

{#    <script>#}
{#        $(document).ready(function() {#}
{#            // Écouteur d'événements pour le switch#}
{#            $('#customSwitch1').on('change', function() {#}
{#                if ($(this).is(':checked')) {#}
{#                    // Si le switch est activé, récupère les produits associés aux types de produits actifs#}
{#                    $.ajax({#}
{#                        url: '/facture/produit/type-produit',#}
{#                        method: 'GET',#}
{#                        success: function(response) {#}
{#                            console.log(response); // Afficher la réponse dans la console#}
{#                            if (response.produits) {#}
{#                                var select = $('.produit-selector'); // Sélection du champ de produit#}
{#                                select.empty(); // Vider le champ#}

{#                                // Ajouter les options récupérées#}
{#                                response.produits.forEach(function(produit) {#}
{#                                    select.append(new Option(produit.name, produit.id));#}
{#                                });#}
{#                            } else {#}
{#                                console.log("Aucun produit trouvé ou la structure de la réponse est incorrecte");#}
{#                            }#}
{#                        },#}
{#                        error: function() {#}
{#                            alert('Erreur de récupération des produits');#}
{#                        }#}
{#                    });#}

{#                } else {#}
{#                    // Si le switch est désactivé, vide le champ produit ou remets une liste par défaut#}
{#                    $('.produit-selector').empty();#}
{#                }#}
{#            });#}
{#        });#}
{#    </script>#}

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const factureId = $('#facture_IdClient');
            const toggleReadOnly = () => {
                const isReadonly = factureId.val() === '3';
                $('input[name*="periode"]').prop('readonly', isReadonly);
                console.log('Période readonly:', isReadonly);
            };

            factureId.change(toggleReadOnly);
            toggleReadOnly();

            new MutationObserver(() => toggleReadOnly()).observe(document.body, { childList: true, subtree: true });
        });

    </script>

{% endblock %}


